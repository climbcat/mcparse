250823:

TODO: Set the instrument name in code-generated *_Config impl.


250821:

This project is nearing a chapter mark, and should be documented and presented
further. We seem to have fixed most of the issues, and the generated code is
being stabilized and bugfixed.

What to present (parser):

- simple code without dependencies (we only depend on the C stdlib)
- parses most of the comps and instruments
- prints errors nicely for development purposes
- does various checks on the instrument s.a. comp types & names
- parses more things, for example
    - arithmetic expressions used in parameter values and AT/ROT values
    - all DECLARE members are parsed now
- performance - how long it takes to parse everything
- debug-ablility with g++
- portability (only missing that one function)

Show examples of:

- how parsing errors looked previously
- how parsing errors look now
- the summary of parsing the entire library (mcstas doesn't do this at all)
- snippet of parsing code e.g. what the comp parse function

Code generation: 

- the idea of the re-imagined code generation
- each component becomes a .h file, very easilly debug-able
- the comps_meta.h file includes everything and gives generic access
- the instr becomes a INSTR_config.h file, which again is a block of simple C++ code
- the porting process for components into C++
- what was cut (MPI, pgcc)

With this code generation, the comp and instr sources become building blocks
available within a customizable C/C++ context. This enables the building of 
custom algorithms and tools.


250814:

// TODO: check during CheckInstrument that the AT-RELATIVE words are valid


250811:

What's happening with instr DECLARE? See e.g. RITA-II:

mcstas-comps/examples/PSI/RITA-II/RITA-II.instr

There is a lot of code logics and struct definitions in there. Seems that the 
instrument DECLARE section is just some free-form code. Why isn't this stuff
in SHARE? 

TODO: rewrite ParseMembers
TODO: replace OptionOfTwo (/Three/Four/Five) with Options(cnt)
TODO: rewrite RequiredRValOrExpression


250806:

The parser is being split into its own project. When working on mctrace 
(the visualizer app), it will be used to support translation/cogen, and the
generated files will be checked into that project. Of course they will be
updated in tandem, to some extent.

Splitting will allow it to be more of a stand-alone project, which I also
intend to present as an example of my work.

To this end, it needs a little more polish and bugfixing. The scope is much
more fixed and focused than befoer when it was one large project, which
is nice too.

Things to finish on this project: 

- when parsing instruments, some instrs dont generate type errors, why?
- when parsing instruments, it doesn't print out an overview; - OK
    I want something like this: parsed_cnt, parse_errors_cnt, type_errors_cnt - OK
- ensure that --cogen outputs files into the correct sub-folders - OK
- have a default folder option to apply for --comp, --instr, but probably not --cogen - OK
- parse listed struct format [int a, b, c;]

Also:
- include a getdeps.sh script - OK
- include a build.sh script - OK

